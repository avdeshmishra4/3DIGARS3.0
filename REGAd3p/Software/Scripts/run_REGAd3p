#!/bin/sh
#purpose: run REGAd3p 
#author: Sumaiya Iqbal

export IUPred_PATH=../AdditionalFiles/iupred

psiblast_path="/home/presentation/DBase/BLAST/ncbi-blast-2.2.28+/bin";
nr_database_path="/home/presentation/DBase/BLAST/ncbi-blast-2.2.28+/bin/nr/nr";
iupred_path="../AdditionalFiles/iupred";
libsvm_path="/home/presentation/Courses/CSCI_6635_Research/Lecture/Set_5_SVM/LibSVM/libsvm-3.17/libsvm-3.17";

input_path="../../../Input";
source_code_path="../Codes";
query_sequence_path="../Features";
pssm_output_file_path="../Features";
sequence="../Features";

printf "\n-------------- REGAd3p Start------------------\n";
for file in `cat $input_path/id_list.txt` ; 
do 
	printf "\nID: "$file;
	printf "\n";
	
	#===========================================================================================================
	# check and process input
	
	if [ -f $input_path/FASTA/$file.fasta ];
	then
		if [ -f ../Features/$file/$file.fasta ];
		then
			printf "Directory and fasta file already exists!!\n";
		else	
			cd $source_code_path;
			g++ -o start processInput.cpp
			./start $file;
			printf "processing Input...";
			printf "...DONE!!!\n";
			rm start;
		fi	
	else
		printf "Error --- FASTA file not found in Input/FASTA directory!!!\n";
		exit 1;
	fi	
	#===========================================================================================================
	
	#===========================================================================================================
	#Run PSI-BLAST to generate PSSM
	
	cd ../Scripts/
	if [ -f ../Features/$file/$file.pssm ];
	then
		printf "PSSM already exists!!\n";
	else
		printf "running PSI-BLAST...";
		$psiblast_path/psiblast -query $query_sequence_path/$file/$file.fasta -db $nr_database_path -out $pssm_output_file_path/$file/$file.out -num_iterations 3 -num_threads 16 -out_ascii_pssm $pssm_output_file_path/$file/$file.pssm > ../Output/log/log_PSSM.txt;
		printf "...DONE!!!\n";	
	fi	
	#===========================================================================================================
	
	#===========================================================================================================
	#Run IUPred (short & long)
	if [ -f ../Features/$file/$file.iupredS ] && [ -f ../Features/$file/$file.iupredL ];
	then
		printf "IUPred short & long already exists!!\n";
	else
		printf "running IUPred (short & long)...";
		cc $iupred_path/iupred.c -o $iupred_path/iupred;
		$iupred_path/iupred $sequence/$file/$file.fasta short > $sequence/$file/$file.iupredS;
		$iupred_path/iupred $sequence/$file/$file.fasta long > $sequence/$file/$file.iupredL;
		printf "...DONE!!!\n";
	fi	
	#===========================================================================================================
	
	#===========================================================================================================
	#Run Monogram, Bigram computation
	if [ -f ../Features/$file/$file.monogram ] && [ -f ../Features/$file/$file.bigram ];
	then
		printf "Monorgam & Bigram exists!!\n";
	else
		cd $source_code_path;
		printf "generating monogram and bigram...";
		g++ -o mg_bg computeMG_BG.cpp
		./mg_bg $file
		printf "...DONE!!!\n";
		rm mg_bg;
	fi	
	#===========================================================================================================
	
	#===========================================================================================================
	#Gather 52 features for SS prediction
	cd $source_code_path;
	printf "collecting features for SS prediction...";
	g++ -o ssf collectFeatures_SS.cpp
	./ssf $file
	printf "...DONE!!!\n";
	rm ssf;
	#===========================================================================================================
	
	#===========================================================================================================
	#apply windowing and prepare final input for initial SS prediction by lbsvm
	cd $source_code_path;
	printf "generating input for SS prediction...";
	g++ -o inputss prepareInput_SS.cpp
	./inputss $file
	printf "...DONE!!!\n";
	rm inputss;
	#===========================================================================================================
	
	#===========================================================================================================
	#predict secondary structure and process output
	cd $source_code_path;
	if [ -f ../Output/prediction/$file/SS/$file.SSp ];
	then
		printf "Predicted Secondary structure output already exists!!\n";
	else
		mkdir ../Output/prediction/$file;
		mkdir ../Output/prediction/$file/SS;
		printf "predicting secondary structure and processing output...";
		g++ -o predictss predictSS_processOutput.cpp
		./predictss $file $libsvm_path
		printf "...DONE!!!\n";
		rm predictss;
	fi	
	#===========================================================================================================
	
	#===========================================================================================================
	#Gather 55 features for ASA prediction
	cd $source_code_path;
	printf "collecting features for ASA prediction...";
	g++ -o asaf collectFeatures_ASA.cpp
	./asaf $file
	printf "...DONE!!!\n";
	rm asaf;
	#===========================================================================================================
	
	#===========================================================================================================
	#Prepare exact input for ASA prediction
	cd $source_code_path;
	printf "generating input for ASA prediction...";
	g++ -o inputasa prepareInput_ASA.cpp
	./inputasa $file
	printf "...DONE!!!\n";
	rm inputasa;
	#===========================================================================================================
	
	#===========================================================================================================
	# Predict ASA
	cd $source_code_path;
	mkdir ../Output/prediction/$file/ASA;
	printf "predicting ASA...";
	g++ -o predictasa predictASA_processOutput.cpp
	./predictasa $file
	printf "...DONE!!!\n";
	rm predictasa;
	#===========================================================================================================
	
done
printf "\n-------------- REGAd3p End------------------\n";































